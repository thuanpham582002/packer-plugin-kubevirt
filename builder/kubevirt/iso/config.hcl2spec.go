// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package iso

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName         *string           `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name"`
	PackerBuilderType       *string           `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type"`
	PackerCoreVersion       *string           `mapstructure:"packer_core_version" cty:"packer_core_version" hcl:"packer_core_version"`
	PackerDebug             *bool             `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug"`
	PackerForce             *bool             `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force"`
	PackerOnError           *string           `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error"`
	PackerUserVars          map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables"`
	PackerSensitiveVars     []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables"`
	KubeConfig              *string           `mapstructure:"kube_config" required:"true" cty:"kube_config" hcl:"kube_config"`
	Name                    *string           `mapstructure:"name" required:"true" cty:"name" hcl:"name"`
	Namespace               *string           `mapstructure:"namespace" required:"true" cty:"namespace" hcl:"namespace"`
	IsoVolumeName           *string           `mapstructure:"iso_volume_name" required:"true" cty:"iso_volume_name" hcl:"iso_volume_name"`
	DiskSize                *string           `mapstructure:"disk_size" required:"true" cty:"disk_size" hcl:"disk_size"`
	StorageClassName        *string           `mapstructure:"storage_class_name" required:"false" cty:"storage_class_name" hcl:"storage_class_name"`
	InstanceType            *string           `mapstructure:"instance_type" required:"true" cty:"instance_type" hcl:"instance_type"`
	InstanceTypeKind        *string           `mapstructure:"instance_type_kind" required:"false" cty:"instance_type_kind" hcl:"instance_type_kind"`
	Preference              *string           `mapstructure:"preference" required:"true" cty:"preference" hcl:"preference"`
	PreferenceKind          *string           `mapstructure:"preference_kind" required:"false" cty:"preference_kind" hcl:"preference_kind"`
	OperatingSystemType     *string           `mapstructure:"os_type" required:"false" cty:"os_type" hcl:"os_type"`
	Networks                []FlatNetwork     `mapstructure:"networks" required:"false" cty:"networks" hcl:"networks"`
	MediaFiles              []string          `mapstructure:"media_files" required:"false" cty:"media_files" hcl:"media_files"`
	BootCommand             []string          `mapstructure:"boot_command" required:"false" cty:"boot_command" hcl:"boot_command"`
	BootWait                *string           `mapstructure:"boot_wait" required:"false" cty:"boot_wait" hcl:"boot_wait"`
	InstallationWaitTimeout *string           `mapstructure:"installation_wait_timeout" required:"true" cty:"installation_wait_timeout" hcl:"installation_wait_timeout"`
	Communicator            *string           `mapstructure:"communicator" required:"false" cty:"communicator" hcl:"communicator"`
	SSHHost                 *string           `mapstructure:"ssh_host" required:"false" cty:"ssh_host" hcl:"ssh_host"`
	SSHLocalPort            *int              `mapstructure:"ssh_local_port" required:"false" cty:"ssh_local_port" hcl:"ssh_local_port"`
	SSHRemotePort           *int              `mapstructure:"ssh_remote_port" required:"false" cty:"ssh_remote_port" hcl:"ssh_remote_port"`
	SSHUsername             *string           `mapstructure:"ssh_username" required:"false" cty:"ssh_username" hcl:"ssh_username"`
	SSHPassword             *string           `mapstructure:"ssh_password" required:"false" cty:"ssh_password" hcl:"ssh_password"`
	SSHWaitTimeout          *string           `mapstructure:"ssh_wait_timeout" required:"false" cty:"ssh_wait_timeout" hcl:"ssh_wait_timeout"`
	WinRMHost               *string           `mapstructure:"winrm_host" required:"false" cty:"winrm_host" hcl:"winrm_host"`
	WinRMLocalPort          *int              `mapstructure:"winrm_local_port" required:"false" cty:"winrm_local_port" hcl:"winrm_local_port"`
	WinRMRemotePort         *int              `mapstructure:"winrm_remote_port" required:"false" cty:"winrm_remote_port" hcl:"winrm_remote_port"`
	WinRMUsername           *string           `mapstructure:"winrm_username" required:"false" cty:"winrm_username" hcl:"winrm_username"`
	WinRMPassword           *string           `mapstructure:"winrm_password" required:"false" cty:"winrm_password" hcl:"winrm_password"`
	WinRMWaitTimeout        *string           `mapstructure:"winrm_wait_timeout" required:"false" cty:"winrm_wait_timeout" hcl:"winrm_wait_timeout"`
	KeepVM                  *bool             `mapstructure:"keep_vm" required:"false" cty:"keep_vm" hcl:"keep_vm"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"packer_build_name":          &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"packer_builder_type":        &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"packer_core_version":        &hcldec.AttrSpec{Name: "packer_core_version", Type: cty.String, Required: false},
		"packer_debug":               &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"packer_force":               &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"packer_on_error":            &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"packer_user_variables":      &hcldec.AttrSpec{Name: "packer_user_variables", Type: cty.Map(cty.String), Required: false},
		"packer_sensitive_variables": &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"kube_config":                &hcldec.AttrSpec{Name: "kube_config", Type: cty.String, Required: false},
		"name":                       &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"namespace":                  &hcldec.AttrSpec{Name: "namespace", Type: cty.String, Required: false},
		"iso_volume_name":            &hcldec.AttrSpec{Name: "iso_volume_name", Type: cty.String, Required: false},
		"disk_size":                  &hcldec.AttrSpec{Name: "disk_size", Type: cty.String, Required: false},
		"storage_class_name":         &hcldec.AttrSpec{Name: "storage_class_name", Type: cty.String, Required: false},
		"instance_type":              &hcldec.AttrSpec{Name: "instance_type", Type: cty.String, Required: false},
		"instance_type_kind":         &hcldec.AttrSpec{Name: "instance_type_kind", Type: cty.String, Required: false},
		"preference":                 &hcldec.AttrSpec{Name: "preference", Type: cty.String, Required: false},
		"preference_kind":            &hcldec.AttrSpec{Name: "preference_kind", Type: cty.String, Required: false},
		"os_type":                    &hcldec.AttrSpec{Name: "os_type", Type: cty.String, Required: false},
		"networks":                   &hcldec.BlockListSpec{TypeName: "networks", Nested: hcldec.ObjectSpec((*FlatNetwork)(nil).HCL2Spec())},
		"media_files":                &hcldec.AttrSpec{Name: "media_files", Type: cty.List(cty.String), Required: false},
		"boot_command":               &hcldec.AttrSpec{Name: "boot_command", Type: cty.List(cty.String), Required: false},
		"boot_wait":                  &hcldec.AttrSpec{Name: "boot_wait", Type: cty.String, Required: false},
		"installation_wait_timeout":  &hcldec.AttrSpec{Name: "installation_wait_timeout", Type: cty.String, Required: false},
		"communicator":               &hcldec.AttrSpec{Name: "communicator", Type: cty.String, Required: false},
		"ssh_host":                   &hcldec.AttrSpec{Name: "ssh_host", Type: cty.String, Required: false},
		"ssh_local_port":             &hcldec.AttrSpec{Name: "ssh_local_port", Type: cty.Number, Required: false},
		"ssh_remote_port":            &hcldec.AttrSpec{Name: "ssh_remote_port", Type: cty.Number, Required: false},
		"ssh_username":               &hcldec.AttrSpec{Name: "ssh_username", Type: cty.String, Required: false},
		"ssh_password":               &hcldec.AttrSpec{Name: "ssh_password", Type: cty.String, Required: false},
		"ssh_wait_timeout":           &hcldec.AttrSpec{Name: "ssh_wait_timeout", Type: cty.String, Required: false},
		"winrm_host":                 &hcldec.AttrSpec{Name: "winrm_host", Type: cty.String, Required: false},
		"winrm_local_port":           &hcldec.AttrSpec{Name: "winrm_local_port", Type: cty.Number, Required: false},
		"winrm_remote_port":          &hcldec.AttrSpec{Name: "winrm_remote_port", Type: cty.Number, Required: false},
		"winrm_username":             &hcldec.AttrSpec{Name: "winrm_username", Type: cty.String, Required: false},
		"winrm_password":             &hcldec.AttrSpec{Name: "winrm_password", Type: cty.String, Required: false},
		"winrm_wait_timeout":         &hcldec.AttrSpec{Name: "winrm_wait_timeout", Type: cty.String, Required: false},
		"keep_vm":                    &hcldec.AttrSpec{Name: "keep_vm", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatMultusNetwork is an auto-generated flat version of MultusNetwork.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatMultusNetwork struct {
	NetworkName *string `mapstructure:"networkName" cty:"networkName" hcl:"networkName"`
	Default     *bool   `mapstructure:"default,omitempty" cty:"default" hcl:"default"`
}

// FlatMapstructure returns a new FlatMultusNetwork.
// FlatMultusNetwork is an auto-generated flat version of MultusNetwork.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*MultusNetwork) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatMultusNetwork)
}

// HCL2Spec returns the hcl spec of a MultusNetwork.
// This spec is used by HCL to read the fields of MultusNetwork.
// The decoded values from this spec will then be applied to a FlatMultusNetwork.
func (*FlatMultusNetwork) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"networkName": &hcldec.AttrSpec{Name: "networkName", Type: cty.String, Required: false},
		"default":     &hcldec.AttrSpec{Name: "default", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatNetwork is an auto-generated flat version of Network.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatNetwork struct {
	Name   *string            `mapstructure:"name" cty:"name" hcl:"name"`
	Pod    *FlatPodNetwork    `mapstructure:"pod" cty:"pod" hcl:"pod"`
	Multus *FlatMultusNetwork `mapstructure:"multus" cty:"multus" hcl:"multus"`
}

// FlatMapstructure returns a new FlatNetwork.
// FlatNetwork is an auto-generated flat version of Network.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Network) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatNetwork)
}

// HCL2Spec returns the hcl spec of a Network.
// This spec is used by HCL to read the fields of Network.
// The decoded values from this spec will then be applied to a FlatNetwork.
func (*FlatNetwork) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":   &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"pod":    &hcldec.BlockSpec{TypeName: "pod", Nested: hcldec.ObjectSpec((*FlatPodNetwork)(nil).HCL2Spec())},
		"multus": &hcldec.BlockSpec{TypeName: "multus", Nested: hcldec.ObjectSpec((*FlatMultusNetwork)(nil).HCL2Spec())},
	}
	return s
}

// FlatNetworkSource is an auto-generated flat version of NetworkSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatNetworkSource struct {
	Pod    *FlatPodNetwork    `mapstructure:"pod" cty:"pod" hcl:"pod"`
	Multus *FlatMultusNetwork `mapstructure:"multus" cty:"multus" hcl:"multus"`
}

// FlatMapstructure returns a new FlatNetworkSource.
// FlatNetworkSource is an auto-generated flat version of NetworkSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*NetworkSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatNetworkSource)
}

// HCL2Spec returns the hcl spec of a NetworkSource.
// This spec is used by HCL to read the fields of NetworkSource.
// The decoded values from this spec will then be applied to a FlatNetworkSource.
func (*FlatNetworkSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"pod":    &hcldec.BlockSpec{TypeName: "pod", Nested: hcldec.ObjectSpec((*FlatPodNetwork)(nil).HCL2Spec())},
		"multus": &hcldec.BlockSpec{TypeName: "multus", Nested: hcldec.ObjectSpec((*FlatMultusNetwork)(nil).HCL2Spec())},
	}
	return s
}

// FlatPodNetwork is an auto-generated flat version of PodNetwork.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatPodNetwork struct {
	VMNetworkCIDR     *string `mapstructure:"vmNetworkCIDR,omitempty" cty:"vmNetworkCIDR" hcl:"vmNetworkCIDR"`
	VMIPv6NetworkCIDR *string `mapstructure:"vmIPv6NetworkCIDR,omitempty" cty:"vmIPv6NetworkCIDR" hcl:"vmIPv6NetworkCIDR"`
}

// FlatMapstructure returns a new FlatPodNetwork.
// FlatPodNetwork is an auto-generated flat version of PodNetwork.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*PodNetwork) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatPodNetwork)
}

// HCL2Spec returns the hcl spec of a PodNetwork.
// This spec is used by HCL to read the fields of PodNetwork.
// The decoded values from this spec will then be applied to a FlatPodNetwork.
func (*FlatPodNetwork) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"vmNetworkCIDR":     &hcldec.AttrSpec{Name: "vmNetworkCIDR", Type: cty.String, Required: false},
		"vmIPv6NetworkCIDR": &hcldec.AttrSpec{Name: "vmIPv6NetworkCIDR", Type: cty.String, Required: false},
	}
	return s
}
